
enum DirErr: Error {
    case InvalidArrow(arrow: Character)
    case MissingDir(puzzle: String)
}

struct Offset {
    var horizontal: Int = 0
    var vertical: Int = 0

    mutating func move(to dir: Direction) {
        switch dir {
            case.up: up()
            case.down: down()
            case.left: left()
            case.right: right()
        }
    }

    mutating func left() {
        horizontal -= 1
    }
    mutating func right() {
        horizontal += 1
    }
    mutating func up() {
        vertical += 1
    }
    mutating func down() {
        vertical -= 1
    }
    var zero: Bool {
        return horizontal == 0 && vertical == 0
    }
    mutating func reset() {
        horizontal = 0
        vertical = 0
    }
}

enum Pawn: Equatable {
    case field, blockage(Bool), visited
}
struct Position {
    var offset: Int
    var dir: Direction

    init(offset: Int, dir: Direction){
        self.offset = offset
        self.dir = dir
    }
    init(pos: Position) {
        offset = pos.offset
        dir = pos.dir
    }
}

extension [Pawn] {
    func clone() -> [Pawn] {
        var clnd: [Pawn] = []
        clnd.reserveCapacity(self.count)
        for pawn in self {
            clnd.append(pawn)
        }
        return clnd
    }
}

class Trapper: CustomStringConvertible {
    var grid: [Pawn]
    let cols: Int
    let initPos: Position
    var traps: [Int] = []

    init(grid: [Pawn], cols: Int, initPos: Position) {
        self.grid = grid
        self.cols = cols
        self.initPos = initPos
    }
    func findTraps() {    
        for i in 0..<grid.count {
            if grid[i] == .field && i != initPos.offset {
            // if Pawn wasn't marked as Equatable, the following
            // 'if case'-statement would have to be used for comparison:
            // if case .field = grid[i], i != initPos.offset {
                var trappedGrid = grid.clone()
                trappedGrid[i] = .blockage(true)
                var board = newBoard(grid: trappedGrid)
                board.play()
                if board.trapped {
                    traps.append(i)
                }
            }
        }
    }
    func newBoard(grid: [Pawn]) -> Board {
        return Board(board: grid, cols: cols, pos: Position(pos: initPos))
    }
    public var description: String {
        for trap in traps {
            grid[trap] = .blockage(true)
        }
        return Board(board: grid, cols: cols, pos: initPos).description
    }

}
struct Board: CustomStringConvertible {
    var board: [Pawn]
    let cols: Int
    let initPos: Position
    var pos: Position
    var finished: Bool = false
    var offset: Offset = Offset()
    var trapped: Bool = false

    init(board: [Pawn], cols: Int, pos: Position) {
        initPos = Position(pos: pos)
        self.board = board
        self.board[initPos.offset] = .visited
        self.pos = pos
        self.cols = cols
    }

    public var description: String {
        var str = ""
        for (i, pos) in board.enumerated() {
            if i % cols == 0 {
                str += "\n"
            }
            if self.pos.offset == i {
                str += self.pos.dir.description
            }else{
                switch pos {
                    case .blockage(true):
                        str += "O"
                    case .blockage(false):
                        str += "#"
                    case .visited:
                        str += "X"
                    case .field:
                        str += "."
                }
            }
            
        }
        return str
    }

    func nextPos() -> Int {
        switch pos.dir {
            case .left:
                return pos.offset - 1
            case .right:
                return pos.offset + 1
            case .up:
                return pos.offset - cols 
            case .down:
                return pos.offset + cols
        }
    }
    mutating func movePawn() {
        let nxt = nextPos()
        // print("nxt: \(nxt), dir: \(pos.dir)")
        let rightOverflow = (pos.dir == .right) && (nxt % cols == 0)
        let leftOverflow = (pos.dir == .left) &&  (nxt % cols == (cols - 1))
        if rightOverflow || leftOverflow || nxt < 0 || nxt > board.count {
            finished = true
        }else{
            switch board[nxt] {
                case .blockage:
                    pos.dir.turn()
                case .field:
                    board[nxt] = .visited
                    offset.reset()
                    pos.offset = nxt
                case .visited:
                    pos.offset = nxt
                    offset.move(to: pos.dir)
                    if offset.zero {
                        trapped = true
                        finished = true
                    }
            }
        }
    }
    func visitdPositions() -> Int {
        return board.filter{
            switch $0 {
                case .visited: true
                default: false
            }
        }.count
    }

    mutating func play() {
        repeat {
            movePawn()
        } while !finished
    }
}

enum Direction: CustomStringConvertible {
    case left, up, right, down;
    var description: String {
        switch self {
            case.left: return "<"
            case.right: return ">"
            case.up: return "^"
            case.down: return "v"
        }
    }
    static func parse(dir: Character) throws -> Direction {
        switch dir {
            case "<": return.left
            case ">": return.right
            case "^": return.up
            case "v": return.down
            default: throw DirErr.InvalidArrow(arrow: dir)
        }
    }
    mutating func turn() {
        switch self {
            case.left: self = .up
            case.right: self = .down
            case.up: self = .right
            case.down: self = .left
        }
    }
}
class Day6: Day {
    var dirRgx: Regex<AnyRegexOutput>
    let log: Bool

    init(log: Bool) throws {
        dirRgx = try Regex("[<,>,^,v]")
        self.log = log
    }
    func eval() throws -> (Int, Int) {
        var board = try parseBoard(puzzle_6)

        let trapper = Trapper(grid: board.board.clone(), cols: board.cols, initPos: board.initPos)

        // part 1
        board.play()
        let visitedPos = board.visitdPositions()
        if log {
            print("board:\n\(board)")
        }

        // part 2
        trapper.findTraps()
        if log {
            print("found traps: \(trapper.traps.count)")
            print("traps:\n\(trapper)")
        }

        return (visitedPos, trapper.traps.count)
    }
    func parseBoard(_ puzzle: String) throws -> Board {
        
        let cols = puzzle.split(separator: "\n")[0].count
        let board = puzzle.replacing("\n", with: "")

        guard let match = board.firstMatch(of: dirRgx) else {
            throw DirErr.MissingDir(puzzle: puzzle)
        }
        var boardArr: [Pawn] = Array(repeating: .field, count: board.count)
        for match in board.matches(of: try! Regex("#")) {
            boardArr[puzzle.distance(from: board.startIndex, to: match.range.lowerBound)] = .blockage(false)
        }
        let offset = puzzle.distance(from: board.startIndex, to: match.range.lowerBound)
        if log {
            print("offset: \(offset)")
            print("cols: \(cols)")
        }
        let dir = try Direction.parse(dir: board[match.range].first!)

        return Board(
            board: boardArr,
            cols: cols,
            pos: Position(offset: offset, dir: dir)
        )
    }
}
let puzzle_6 = """
#.............#.#...........................................................#..........#...........................#..........#...
............#......................#.......#..#.........#...................##....................................................
..............#...........#..#.......#.........#.#...........................#................................#......#............
.....#......................................#......#..#...................#....................#......................#...........
...#............................#................................#................................................................
..........#..................#.....#......................................................#.......................................
..#........#.......#.#...............................................................#......#.................................#...
.#....#................#................#.....#...................#...............................................#..#............
.......................................................................................#...#.#....#........##......#........#.#.##
............................................#.................#.....................#..........................#..................
....#..........##......................#.................................................................................#........
......#.............##.........#.......#.........#.......#.............#...#.......#..............................................
.#............................................................................#..........#....#...................................
...#..#....#..............................#...........................................................................#...........
.............#....................................................................................................................
................................#..................##...................................#...............................#......#..
..........#.........#.................#..........###...........................................#............#...#.................
.............#....................................#.......#.#.#............#............................................#.........
......#.#..............................................................................................#.........................#
...#...#.........#.........#..#......#................##.................#........................................................
.................................#......................#........#................#........................#......................
.......................##..............#................#................#..............................#.........................
.......#...#.....#.....##........................#..................##.....#......................................................
.............................................#...........................#..........................................#.....#.......
.........................#...............#....#..............#.......#...............#.#.................#.................#......
...........................................................#....#..................................#..............................
..........................#.................................................#............................##....#..................
.................#...#.........................................................#........................#.....#..#................
.........................#....#................................................#...#.....................#....#...........#.......
................................................##.......#.#....................................#.......##........................
..........##...#.......................#....#..#....................#........................#....................................
#......#.......................#............#.....................................................................#...............
.......#.......#...#..#..........#.......................................#.............#......#...................................
...............#............#..................#.................................................................................#
.......#...........#.......................##.....#.........#...........#...................#......#.........#.............##....#
...................#.........................#......#..........................................#..........#.........#......#......
.....#............#..............#...#......#....................#.............#..................................................
................................................#........#.....#...................#.....................................#.....#..
......................#.#...##......................##...............................................#.................#..........
#...................#.........................#...........#.....#................#.....................#...................#......
....#................#.....#.............#.....................................#....#...#.................................#.......
.........#.....................................................................................................#.#.......#........
.........#..........##..............................#............................#.#.............................#................
#....#.#..............................................##...#...#...............#.............#....................................
........#..#.#...................#.......................................................................#.............#..#.#...#.
.................................................................................................................#.......#........
............................................#..#...............##........#..........#.......................................#....#
........#...........................#............................#.....#........................#..........#...#..........#.......
.#...........#...................................................#...........................................#................#.#.
............#...............................#........#...........#..........#...........#.#..............#........................
...............................................................................##.#................#..............................
.#.......................#.#...........#..................................#.......................................................
..#..............................................##................#.......#....#..............#.....................#...#........
...................#.....#................................................#..........#.........#.........#.....................#..
........#................#................................................................................#......#................
...................#...#....#.........................#.........................#....................#..........................#.
.................#.......................................................#................................................#.......
..#...........................##.#.............#..#............................................#.......................#.#........
..#......#.........................................................................#.......................#......................
...........................................................................................................#............#......#..
............................................................^..........................................#..........#...............
..#.........#....................#..........................................#........#.........................................#..
........#...............#....#.............#......#.........................................................................#.....
.........#......#.....#..............#...........................................................#..............#.................
.........#...................................................#...###...........#.......#.##.......................................
.....................##.................#.........##.....................#................#................#.........#............
.......................................................................#..............#..............#.................#..........
.##.........#..........................................................................#....................................#.....
.........................#.............................#........................................................................#.
........#.............................................#......#....#.....................................#....................#....
........#...#..............................................................................#.........#............................
..............................#................................#..........#..............#..................................#.....
........##..#...................................#................................#.................#.........#......#..#........#.
..................#......#...................................................................#....................................
..........#.............#..............#........#............#...............#..#..........#..............#.#...#............#....
............................##....#..............#......................................................................#.........
...............................................#.....#...........#.....##...............#..#......................................
.........................#.......#...............................#...........#.........#...........#....#.........................
.#............#...#...............#..............................................................#..........................#....#
#...........#......................................................#.............................#......#.........................
..................................................#....#...............#.........................#................................
................................................#..........................#.......#..............................#....##.......#.
........#......#..#............#................#............................#......#.##.........#....................#..#........
.......................................................#..#.#....................#..#......................................#......
.....................#.......................................................................#............#.......................
.....................##........................#...................#.....................#........................................
..........................#...........................................................................................#...........
..#..........#...................#..............##..#.....................#...................#..............#...........#........
#................................#....##......#.............#..............#.......................#.........#...........#........
..................#................#...............................#.....#..........#................#..............#.............
................#.#.........#.....##...............................................................#..............#...............
..#...............................................................................................#...............................
..........#.................#...........#.......#.........................#...#.......#...........................................
..##....#......................................#.#.......................................#.................#......................
.......................#..#...#.##......................................................................#.........#...#...........
...............#.........#..............#.....................................................#...................#...............
......#.................#............#......#...................#..#.........................#........................#........#..
......................................................................#...........................#........#......................
..........#..........#........................#.............##....................................................................
....#................................................#.......................#................#...............#...................
.................#....................................................#......#....................................................
.#........#.......................................................................................................................
......##..................#....#......#.................#....................#.....................#..#...........#...............
#...#...#...#..............#........#.......................#.#..........#...............................#......#.................
#...#...................#.............#........#..........#...............................................................#...#...
..#................................#...#.........................#...................#......#.....................................
...#...###..........#............#...............................................................#..........#.....................
............#..............#.......#.....#..........#.....#.........................................................#............#
..#......................#..#...#................................#......#.......#.....#..................#.........#..............
....##......#.......................................................#..............................................#..............
...............................#.....#....#.................................................#.......#............#................
..........#....#......................#........#..........................#......#................................................
......#.............................#...........#..................#...........................#................................#.
...........................##..........................................#.....#.#.....................#................#...........
..#..............#.........................................................#........................#.........#.................#.
#.....#.....#......................#....................#........................................#...........#...........#......#.
.......................................#..#................................#.........#.......#..#.....#..........................#
..........#..............##...............#..........................................................#......#......#......#....#..
.............#..............#..#......#........#..#......##.......................#...........#.......#...........................
......................#.......................................#.......#..#.....................................#.........#...##...
...........................#...........................#......#....#.............................#.............................#..
..................#............................#....#........##.........................#..............#.............#............
.......#....................#.....#........#.......#.#...#...............#.....#.#.........................#.......#.#............
.....#.........#.......#..........#.................#..#...#..................................................##..................
................#........................................................#........................................................
....##......#........#..................#.........................#...................................#...#...................#...
..............#....................#.......#.......................#.............#......#..............#..........................
...........................#..............#.....#............#.....................#........#....#.......................#........
........#..##................#.....#.#..............#..............................#........................#.........#...........
.........................................................#...........................##..........#........#.##....................
"""